package com.mit.controllers;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mit.bodies.AtlasEmailSignup;
import com.mit.define.ApiError;
import com.mit.errcode.UserErrCode;
import com.mit.http.ApiResponse;
import com.mit.services.AtlasUserService;
import com.mit.sessions.AtlasSession;
import com.mit.user.responses.LoginToken;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(value = "Register api")
@Controller
@RequestMapping(value = "/register")
public class RegisterController {
	Logger logger = LoggerFactory.getLogger(RegisterController.class);
	
	@Autowired
	AtlasUserService userService;
	
	@RequestMapping(value = "", method = RequestMethod.GET)
	public ModelAndView renderRegister(HttpServletRequest request, Model model) {
		ModelAndView mav = new ModelAndView("register");
		if (AtlasSession.getUserSession(request) != null) {
			mav.setViewName("redirect:" + (String)model.asMap().get("admin_prefix"));
		}
		return mav;
	}
	
	@ApiOperation(value = "email register", notes = "")
	@RequestMapping(value = "/email", method = RequestMethod.POST)
	@ResponseBody
	public ApiResponse<LoginToken> emailRegister(HttpServletRequest request, @RequestBody AtlasEmailSignup body) {
		try {
			Map<String, Object> registerMap = userService.emailRegister(body);
			int err = (int) registerMap.get("err");
			if (err == UserErrCode.SUCCESS) {
				LoginToken loginToken = (LoginToken) registerMap.get("loginToken");
				AtlasSession.setSession(request, loginToken.getSessionKey(), loginToken.getRefreshToken());
				return new ApiResponse<>(loginToken);
			}
			if (err == UserErrCode.MISSING_PARAMS) {
				return new ApiResponse<>(ApiError.MISSING_PARAM);
			}
			if (err == UserErrCode.EMAIL_INVALID) {
				return new ApiResponse<>(ApiError.PARAMS_INVALID);
			}
			if (err == UserErrCode.DUPLICATE_USERNAME) {
				return new ApiResponse<>(ApiError.USERNAME_EXIST);
			}
		} catch (Exception e) {
			logger.info("Exception: ", e);
		}
		return new ApiResponse<>(ApiError.SERVER_ERROR);
	}
}
