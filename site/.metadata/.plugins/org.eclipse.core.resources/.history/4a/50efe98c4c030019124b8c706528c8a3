package com.mit.navigation.responses;

import com.mit.navigation.entities.FloorRoute;
import com.mit.navigation.entities.Path;
import com.mit.navigation.enums.FloorDirection;
import com.mit.navigation.enums.TransitMode;
import com.mit.utils.MathUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by Lap Pham on 6/21/17.
 */
public class FloorRouteResponse {
    private List<PathResponse> paths;
    private double distance;
    private long roundDistanceInYd;
    private FloorShortResponse floor;
    private int direction;
    private int transitMode;
    private String transitInstruction;

    public FloorRouteResponse(FloorRoute floorRoute, Map<Long, FloorShortResponse> floors, FloorRouteResponse preFloorRoute) {
        super();
        this.paths = new ArrayList<>(floorRoute.getPaths().size());
        this.distance = 0;
        this.roundDistanceInYd = 0;
        this.floor = floors.get(floorRoute.getFloorId());
        this.direction = floorRoute.getDirection();
        this.transitMode = floorRoute.getTransitMode();

        for (Path path: floorRoute.getPaths()) {
            PathResponse pathView = new PathResponse(path, this.floor);
            this.distance += pathView.getDistance();
            this.roundDistanceInYd += pathView.getRoundDistanceInYd();
            this.paths.add(pathView);
        }

        StringBuilder transitInstruction = new StringBuilder();

        if (preFloorRoute == null || preFloorRoute.getTransitMode() == TransitMode.NONE.getValue()) {
            if (transitMode == TransitMode.ELEVATOR.getValue()) {
                transitInstruction.append("Go from the starting point to the elevator.");
            } else if (transitMode == TransitMode.ESCALATOR.getValue()) {
                transitInstruction.append("Go from the starting point to the escalator.");
            } else {
                transitInstruction.append("Go from the starting point to the goal.");
            }
        } else {
            if (preFloorRoute.getTransitMode() == TransitMode.ELEVATOR.getValue()) {
                transitInstruction.append("Take elevator, ");
            } else if (preFloorRoute.getTransitMode() == TransitMode.ESCALATOR.getValue()) {
                transitInstruction.append("Take escalator, ");
            }

            if (preFloorRoute.getDirection() == FloorDirection.UP.getValue()) {
                transitInstruction.append("go up to ");
            } else if (preFloorRoute.getDirection() == FloorDirection.DOWN.getValue()) {
                transitInstruction.append("go down to ");
            }

            if (preFloorRoute.getTransitMode() != TransitMode.NONE.getValue()) {
                transitInstruction.append(MathUtils.ordinalSuffixOf(floor.getNumber()) + " floor. Then go to the goal.");
            }
        }

        this.transitInstruction = transitInstruction.toString();
    }

    public List<PathResponse> getPaths() {
        return paths;
    }

    public void setPaths(List<PathResponse> paths) {
        this.paths = paths;
    }

    public double getDistance() {
        return distance;
    }

    public void setDistance(double distance) {
        this.distance = distance;
    }

    public long getRoundDistanceInYd() {
        return roundDistanceInYd;
    }

    public void setRoundDistanceInYd(long roundDistanceInYd) {
        this.roundDistanceInYd = roundDistanceInYd;
    }

    public FloorShortResponse getFloor() {
        return floor;
    }

    public void setFloor(FloorShortResponse floor) {
        this.floor = floor;
    }

    public int getDirection() {
        return direction;
    }

    public void setDirection(int direction) {
        this.direction = direction;
    }

    public int getTransitMode() {
        return transitMode;
    }

    public void setTransitMode(int transitMode) {
        this.transitMode = transitMode;
    }

    public String getTransitInstruction() {
        return transitInstruction;
    }

    public void setTransitInstruction(String transitInstruction) {
        this.transitInstruction = transitInstruction;
    }
}
