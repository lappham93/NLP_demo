package com.mit.suggest.repositories;

import java.util.Arrays;
import java.util.List;

import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.SearchQuery;
import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.mit.common.enums.ObjectType;
import com.mit.common.repositories.ElasticRepo;
import com.mit.suggest.entities.ElasticSuggester;

/**
 * Created by Lap Pham on 6/14/17.
 */

@Repository
public class ElasticSuggesterRepo extends ElasticRepo<ElasticSuggester> {

    @Autowired
    private ElasticsearchTemplate elasticsearchTemplate;

    public Page<ElasticSuggester> searchInMap(String q, long eventId, int page, int size) {
    	List<Integer> objectTypes = Arrays.asList(ObjectType.BOOTH.getValue(), ObjectType.ELEVATOR.getValue(), ObjectType.ESCALATOR.getValue(), ObjectType.TALK.getValue(), ObjectType.WC.getValue());
    	return search(q, objectTypes, eventId, 0, "", page, size);
    }
    
    public Page<ElasticSuggester> search(String q, List<Integer> objectTypes, long eventId, long boothId, String country, int page, int size) {

        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
        boolQuery.must(QueryBuilders.queryStringQuery(q).field("keyword").analyzer("autocomplete-search"));

        if (!CollectionUtils.isEmpty(objectTypes)) {
            boolQuery.must(QueryBuilders.termsQuery("objectRef.type", objectTypes));
        } else {
            // remove place results
            boolQuery.mustNot(QueryBuilders.termQuery("objectRef.type", ObjectType.ADDRESS.getValue()));
        }

        if (boothId > 0) {
            boolQuery.must(QueryBuilders.termQuery("boothId", boothId));
        }

        if (eventId > 0) {
            boolQuery.must(QueryBuilders.termQuery("eventId", eventId));
        }

        if (!StringUtils.isEmpty(country)) {
            boolQuery.must(QueryBuilders.termQuery("country", country));
        }

        NativeSearchQueryBuilder nativeSearchQuery = new NativeSearchQueryBuilder()
                .withQuery(boolQuery);

        nativeSearchQuery.withPageable(new PageRequest(page, size));

        SearchQuery searchQuery = nativeSearchQuery.build();

        Page<ElasticSuggester> suggesterPage = elasticsearchTemplate.queryForPage(searchQuery, ElasticSuggester.class);
        return suggesterPage;
    }
}
