package com.mit.navigation.repositories;

import com.mit.common.repositories.ElasticRepo;
import com.mit.navigation.entities.ElasticBooth;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.lang3.StringUtils;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.sort.SortBuilder;
import org.elasticsearch.search.sort.SortBuilders;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.SearchQuery;
import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by Lap Pham on 6/14/17.
 */

@Repository
public class ElasticBoothRepo extends ElasticRepo<ElasticBooth> {

    @Autowired
    private ElasticsearchTemplate elasticsearchTemplate;

    public Page<ElasticBooth> find(long eventId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int page, int size, List<SortBuilder> sorts) {
        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
        if (categoryIds == null) {
        	categoryIds = Arrays.asList();
        }
        
        boolQuery.must(QueryBuilders.termsQuery("categoryId", categoryIds));

        if (eventId > 0) {
            boolQuery.must(QueryBuilders.termQuery("eventId", eventId));
        }

        if (floorId > 0) {
            boolQuery.must(QueryBuilders.termQuery("floorId", floorId));
        }

        if (isFeature) {
            boolQuery.must(QueryBuilders.termQuery("feature", isFeature));
        }

        if (!StringUtils.isEmpty(query)) {
//            boolQuery.must(QueryBuilders.queryStringQuery(query.trim()).field("name"));
            boolQuery.minimumNumberShouldMatch(1).should(QueryBuilders.queryStringQuery(query.trim()).field("name"))
				.should(QueryBuilders.matchQuery("hashTags", query));
        }

        NativeSearchQueryBuilder nativeSearchQuery = new NativeSearchQueryBuilder()
                .withQuery(boolQuery);

        if (!CollectionUtils.isEmpty(sorts)) {
            for (SortBuilder sort: sorts) {
                nativeSearchQuery.withSort(sort);
            }
        }

        nativeSearchQuery.withPageable(new PageRequest(page, size));

        SearchQuery searchQuery = nativeSearchQuery.build();

        Page<ElasticBooth> productPage = elasticsearchTemplate.queryForPage(searchQuery, ElasticBooth.class);
        return productPage;
    }

    public Page<ElasticBooth> findDefault(long bizId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int from, int size) {
        List<SortBuilder> sorts = null;
        if (query == null || query.isEmpty()) {
            sorts = new ArrayList<>(2);
            sorts.add(SortBuilders.fieldSort("feature").order(SortOrder.DESC));
            sorts.add(SortBuilders.fieldSort("name.raw").order(SortOrder.ASC));
        }
        return find(bizId, categoryIds, floorId, query, isFeature, from, size, sorts);
    }

    public Page<ElasticBooth> findNewest(long eventId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int page, int size) {
        SortBuilder sort = SortBuilders.fieldSort("createdDate").order(SortOrder.DESC);
        return find(eventId, categoryIds, floorId, query, isFeature, page, size, Arrays.asList(sort));
    }

    public Page<ElasticBooth> findAZ(long eventId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int page, int size) {
        SortBuilder sort = SortBuilders.fieldSort("name.raw").order(SortOrder.ASC);
        return find(eventId, categoryIds, floorId, query, isFeature, page, size, Arrays.asList(sort));
    }

    public Page<ElasticBooth> findZA(long eventId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int page, int size) {
        SortBuilder sort = SortBuilders.fieldSort("name.raw").order(SortOrder.DESC);
        return find(eventId, categoryIds, floorId, query, isFeature, page, size, Arrays.asList(sort));
    }

    public Page<ElasticBooth> findMatchest(long eventId, List<Long> categoryIds, long floorId, String query, boolean isFeature, int page, int size) {
        return find(eventId, categoryIds, floorId, query, isFeature, page, size, null);
    }

    public List<Long> page2Ids(Page<ElasticBooth> page) {
        List<ElasticBooth> booths = page.getContent();
        List<Long> ids = new ArrayList<>(booths.size());
        for (ElasticBooth booth: booths) {
            ids.add(NumberUtils.toLong(booth.getId()));
        }
        return ids;
    }
}
