package com.mit.navigation.responses;

import com.mit.common.enums.ObjectType;
import com.mit.navigation.entities.Booth;
import com.mit.react.entities.ReactStat;
import com.mit.react.enums.ReactType;
import com.mit.utils.LinkBuilder;
import com.mit.utils.MathUtils;
import org.springframework.util.CollectionUtils;

import java.util.List;

public class BoothShortResponse extends IndoorLocationResponse {
	private BoothCategoryResponse category;
	private String desc;
	private String site;
	private String phone;
	private String photo;
	private String arModel;
	private String arTexture;
	private boolean isFeature;
	private int totalOnline;
	private double distance;
	private int totalLike;
	private boolean isLiked;
	private int totalView;
	private boolean isViewed;
	private int totalShare;
	private int totalFollow;
	private boolean isFollowed;
	private int totalComment;
	private int totalRating;
	private double ratingPoint;

	public BoothShortResponse(Booth booth, FloorShortResponse floor, List<ReactStat> reactStats, int totalOnline,
			long userId) {
		super(booth, floor);

		this.desc = booth.getDesc();
		this.site = booth.getSite();
		this.phone = booth.getPhone();
		this.photo = LinkBuilder.buildPhotoLink(booth.getPhoto(), ObjectType.BOOTH.getLowerName());
		this.arModel = LinkBuilder.buildPhotoLink(booth.getArModel(), ObjectType.BOOTH.getLowerName());
		this.arTexture = LinkBuilder.buildPhotoLink(booth.getArTexture(), ObjectType.BOOTH.getLowerName());
		this.isFeature = booth.isFeature();
		this.totalOnline = totalOnline;
		if (!CollectionUtils.isEmpty(reactStats)) {
			for (ReactStat stat : reactStats) {
				int reactType = stat.getReactType();
				if (reactType == ReactType.FOLLOW.getValue()) {
					this.totalFollow = stat.getTotal();
					this.isFollowed = stat.getUserIds() != null && stat.getUserIds().contains(userId);
				} else if (reactType == ReactType.LIKE.getValue()) {
					this.totalLike = stat.getTotal();
					this.isLiked = stat.getUserIds() != null && stat.getUserIds().contains(userId);
				} else if (reactType == ReactType.VIEW.getValue()) {
					this.totalView = stat.getTotal();
					this.isViewed = stat.getUserIds() != null && stat.getUserIds().contains(userId);
				} else if (reactType == ReactType.COMMENT.getValue()) {
					this.totalComment = stat.getTotal();
				} else if (reactType == ReactType.RATING.getValue()) {
					this.totalRating = stat.getTotal();
					this.ratingPoint = MathUtils.round((double) stat.getTotalRatingPoint() / totalRating, 1);
				} else if (reactType == ReactType.SHARE.getValue()) {
					this.totalShare = stat.getTotal();
				}
			}
		}
	}

	public BoothCategoryResponse getCategory() {
		return category;
	}

	public BoothShortResponse setCategory(BoothCategoryResponse category) {
		this.category = category;
		return this;
	}

	public String getDesc() {
		return desc;
	}

	public String getSite() {
		return site;
	}

	public String getPhone() {
		return phone;
	}

	public String getPhoto() {
		return photo;
	}

	public String getArModel() {
		return arModel;
	}

	public String getArTexture() {
		return arTexture;
	}

	public boolean isFeature() {
		return isFeature;
	}

	public int getTotalOnline() {
		return totalOnline;
	}

	public double getDistance() {
		return distance;
	}

	public void setDistance(double distance) {
		this.distance = distance;
	}

	public int getTotalLike() {
		return totalLike;
	}

	public boolean isLiked() {
		return isLiked;
	}

	public void setTotalLike(int totalLike) {
		this.totalLike = totalLike;
	}

	public void setLiked(boolean isLiked) {
		this.isLiked = isLiked;
	}

	public void setTotalView(int totalView) {
		this.totalView = totalView;
	}

	public void setViewed(boolean isViewed) {
		this.isViewed = isViewed;
	}

	public void setTotalShare(int totalShare) {
		this.totalShare = totalShare;
	}

	public int getTotalView() {
		return totalView;
	}

	public boolean isViewed() {
		return isViewed;
	}

	public int getTotalShare() {
		return totalShare;
	}

	public int getTotalFollow() {
		return totalFollow;
	}

	public boolean isFollowed() {
		return isFollowed;
	}

	public int getTotalComment() {
		return totalComment;
	}

	public int getTotalRating() {
		return totalRating;
	}

	public double getRatingPoint() {
		return ratingPoint;
	}

}
