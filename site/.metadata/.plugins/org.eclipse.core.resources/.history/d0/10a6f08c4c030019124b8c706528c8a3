package com.mit.navigation.repositories;

import java.util.List;

import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Repository;

import com.mit.common.repositories.TimeDocRepo;
import com.mit.navigation.entities.Elevator;

@Repository
public class ElevatorRepo extends TimeDocRepo<Elevator> {
	
	public int totalAll(long eventId, boolean onlyActive) {
		Criteria criteria = Criteria.where("isDeleted").is(false);
		if (eventId > 0) {
			criteria.and("eventId").is(eventId);
		}
		if (onlyActive) {
			criteria.and("isActive").is(true);
		}
		return (int) mongoOps.count(new Query(criteria), Elevator.class);
	}
	
	public Elevator getById(long id) {
		return mongoOps.findById(id, Elevator.class);
	}
	
	public List<Elevator> getSlice(long eventId, boolean onlyActive, int from, int count) {
		Criteria criteria = Criteria.where("isDeleted").is(false);
		if (eventId > 0) {
			criteria.and("eventId").is(eventId);
		}
		if (onlyActive) {
			criteria.and("isActive").is(true);
		}
		return mongoOps.find(new Query(criteria).skip(from).limit(count), Elevator.class);
	}
	
	public List<Elevator> getList(long eventId) {
		Criteria criteria = Criteria.where("eventId").is(eventId).and("isActive").is(true).and("isDeleted").is(false);
		Sort sort = new Sort(new Order(Direction.ASC, "name"));
		return mongoOps.find(new Query(criteria).with(sort), Elevator.class);
	}
	
	public List<Elevator> getListBetweenFloor(long eventId, int fromFloorNumber, int toFloorNumber) {
		Criteria criteria = Criteria.where("eventId").is(eventId).and("fromFloorNumber").lte(fromFloorNumber).and("toFloorNumber").gte(toFloorNumber)
				.and("isActive").is(true).and("isDeleted").is(false);
		Sort sort = new Sort(new Order(Direction.ASC, "name"));
		return mongoOps.find(new Query(criteria).with(sort), Elevator.class);
	}
	
	public void delete(long id) {
		Update update = new Update().set("isDeleted", true);
		Query query = new Query(Criteria.where("id").is(id));
		mongoOps.updateFirst(query, update, Elevator.class);
	}
}
